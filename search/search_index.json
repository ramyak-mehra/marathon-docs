{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Marathon Marathon is a collection of modules designed to make using Dart on the server-side easier. Why Another Serverside Framework Maintained and maintainable: Every other notable server-side effort in Dart is abandoned or sporadically maintained. Most of these had issues because of their monolithic nature. Built in Dart: Dart is a nice language. It maintains readability and traditional C-style syntax while bringing modern languge features. Modular: it's based around shelf , a minimal web server built and maintained by the Dart team. You can use Marathon's routing, authentication, ORM, and more independently of each other. Clean and dependency-free: We've minimized third-party dependencies to avoid getting you in dependency hell. Well documented: Each module of Marathon has been extensively documented and planned to avoid unexpected behavior. Getting Started TBD","title":"Home"},{"location":"#welcome-to-marathon","text":"Marathon is a collection of modules designed to make using Dart on the server-side easier.","title":"Welcome to Marathon"},{"location":"#why-another-serverside-framework","text":"Maintained and maintainable: Every other notable server-side effort in Dart is abandoned or sporadically maintained. Most of these had issues because of their monolithic nature. Built in Dart: Dart is a nice language. It maintains readability and traditional C-style syntax while bringing modern languge features. Modular: it's based around shelf , a minimal web server built and maintained by the Dart team. You can use Marathon's routing, authentication, ORM, and more independently of each other. Clean and dependency-free: We've minimized third-party dependencies to avoid getting you in dependency hell. Well documented: Each module of Marathon has been extensively documented and planned to avoid unexpected behavior.","title":"Why Another Serverside Framework"},{"location":"#getting-started","text":"TBD","title":"Getting Started"},{"location":"cli/","text":"A few of the initial features for the marathon cli Initialise the main app. This would be the starting point for the server. It would contain configuration for the whole webserver like authentication backend, default database, fallback database , url , media routes , static files route etc. New apps Create New sub apps which would be mostly plug and play. Create a super user This would create an admin user which has superuser privileges i.e will be the master user. Can have multiple superusers. Start the server. The user can start the server on a specific port using this. It would support hot reloading. Some commands for the database. Some basic commands for the db like load fixtures, flush database, makemigrations , migrate db.","title":"CLI"},{"location":"cli/#a-few-of-the-initial-features-for-the-marathon-cli","text":"","title":"A few of the initial features for the marathon cli"},{"location":"cli/#initialise-the-main-app","text":"This would be the starting point for the server. It would contain configuration for the whole webserver like authentication backend, default database, fallback database , url , media routes , static files route etc.","title":"Initialise the main app."},{"location":"cli/#new-apps","text":"Create New sub apps which would be mostly plug and play.","title":"New apps"},{"location":"cli/#create-a-super-user","text":"This would create an admin user which has superuser privileges i.e will be the master user. Can have multiple superusers.","title":"Create a super user"},{"location":"cli/#start-the-server","text":"The user can start the server on a specific port using this. It would support hot reloading.","title":"Start the server."},{"location":"cli/#some-commands-for-the-database","text":"Some basic commands for the db like load fixtures, flush database, makemigrations , migrate db.","title":"Some commands for the database."},{"location":"authentication/api/","text":"","title":"API"},{"location":"authentication/different-approaches/","text":"This page describes how different frameworks handle authentication Django There is not much that goes into wile handling authentication in Django. Here's a brief overview of it. So the request coming in travels first to a session handler which sees if the session is valid its expiry date and suspicious activity so it deletes its session and a whole bunch of other things. Then the request travels down to authentication middleware. Before we jump into what authentication middleware does let's discuss user objects in Django. So there are 2 types of users by default Anonymous user and normal user . Normal User has fields like username, hashed password, first name, last name email, and different functions like is_authenticated. As in the case of Anonymous user as the name suggests it has methods like is_authenticated always return false. So coming back to authentication middleware, once the sessions in the request are validated \" sort of \"by the session middleware auth tries to see if there is a user that exists and attach that user object anonymous or existing user to the request object to be accessed internally easily. It also caches the users but I don't know-how. I find everything here quite structured. We take the heavy lifting from the user so that he doesn't have to worry about implementing jwt or sessions and all of that stuff and just focus on building stuff. Before all the session and auth middleware it also does a lot of other validations to prevent attacks by using csrf token, etc which would also be good to implement. I am gonna link some more resources down here if you wanna read more about it. Using the Django authentication system How to user Sessions","title":"Authentication Approaches"},{"location":"authentication/different-approaches/#this-page-describes-how-different-frameworks-handle-authentication","text":"","title":"This page describes how different frameworks handle authentication"},{"location":"authentication/different-approaches/#django","text":"","title":"Django"},{"location":"authentication/different-approaches/#there-is-not-much-that-goes-into-wile-handling-authentication-in-django-heres-a-brief-overview-of-it","text":"So the request coming in travels first to a session handler which sees if the session is valid its expiry date and suspicious activity so it deletes its session and a whole bunch of other things. Then the request travels down to authentication middleware. Before we jump into what authentication middleware does let's discuss user objects in Django. So there are 2 types of users by default Anonymous user and normal user . Normal User has fields like username, hashed password, first name, last name email, and different functions like is_authenticated. As in the case of Anonymous user as the name suggests it has methods like is_authenticated always return false. So coming back to authentication middleware, once the sessions in the request are validated \" sort of \"by the session middleware auth tries to see if there is a user that exists and attach that user object anonymous or existing user to the request object to be accessed internally easily. It also caches the users but I don't know-how. I find everything here quite structured. We take the heavy lifting from the user so that he doesn't have to worry about implementing jwt or sessions and all of that stuff and just focus on building stuff. Before all the session and auth middleware it also does a lot of other validations to prevent attacks by using csrf token, etc which would also be good to implement. I am gonna link some more resources down here if you wanna read more about it. Using the Django authentication system How to user Sessions","title":"There is not much that goes into wile handling authentication in Django. Here's a brief overview of it."},{"location":"authentication/overview/","text":"","title":"Overview"}]}